import React, { useState, useEffect, useContext } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import RecipeInfo from '../../components/RecipeInfo/RecipeInfo';
import ToggleSwitch from '../../components/ToggleSwitch/ToggleSwitch';
import Ingredients from '../../components/Ingredients/Ingredients';
import Equipment from '../../components/Equipment/Equipment';
import Instructions from '../../components/Instructions/Instructions';
import NutritionalInfo from '../../components/NutritionalInfo/NutritionalInfo';
import AddToProfileButton from '../../components/AddToProfileButton/AddToProfileButton';
import AddToCartButton from '../../components/AddToCartButton/AddToCartButton';
import AuthContext from '../../AuthContext';
import ImageUploadModal from '../../components/ImageUploadModal/ImageUploadModal';
import Loading from '../../components/Loading/Loading';
import {
  fetchRecipeById,
  fetchUserRecipeById,
  updateUserRecipeById,
  uploadAdditionalImage,
  uploadMainImage,
} from '../../utils/api';

import './RecipePage.css';

const RecipePage = (props) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { isAuthenticated, login } = useContext(AuthContext);
  const [recipe, setRecipe] = useState(null);
  const [isMetric, setIsMetric] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedRecipe, setEditedRecipe] = useState(null);
  const [validationError, setValidationError] = useState(null);
  const [saveMessage, setSaveMessage] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [visibleImageCount, setVisibleImageCount] = useState(5);
  const [mainImage, setMainImage] = useState('');
  const [displayImages, setDisplayImages] = useState([]);
  const [completedIngredients, setCompletedIngredients] = useState([]);
  const [completedInstructions, setCompletedInstructions] = useState([]);

  useEffect(() => {
    if (props.recipe) {
      console.log('props.recipe:', props.recipe);
      setRecipe(props.recipe);
      const image = props.recipe.image ? props.recipe.image : '';
      setMainImage(image);
      const imagesArray = [image, ...(props.recipe.additional_images || [])];
      setDisplayImages(imagesArray);
      setLoading(false);
    } else {
      if (window.location.pathname.includes('/user/')) {
        loadUserRecipeById(id);
      } else {
        loadRecipeById(id);
      }
    }

    const handleResize = () => {
      setVisibleImageCount(window.innerWidth < 768 ? 2 : 5);
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, [id, props.recipe]);

  const loadRecipeById = async (recipeId) => {
    try {
      const data = await fetchRecipeById(recipeId);
      setRecipe(data);
      setMainImage(data.image);

      const imagesArray = [data.image];
      if (Array.isArray(data.additional_images)) {
        imagesArray.push(...data.additional_images);
      }
      setDisplayImages(imagesArray);
    } catch (error) {
      console.error('Error fetching recipe:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const loadUserRecipeById = async (recipeId) => {
    try {
      const data = await fetchUserRecipeById(recipeId);
      setRecipe(data);
      const image = data.image ? data.image : '';
      setMainImage(image);

      const imagesArray = [image];
      if (Array.isArray(data.additional_images)) {
        imagesArray.push(...data.additional_images);
      }
      setDisplayImages(imagesArray);
    } catch (error) {
      console.error('Error fetching user recipe:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleToggle = (isMetric) => {
    setIsMetric(isMetric);
  };

  const handleEditClick = () => {
    if (!isAuthenticated) {
      login();
    } else {
      setEditedRecipe({ ...recipe });
      setCompletedIngredients([]);
      setCompletedInstructions([]);
      setIsEditing(true);
    }
  };

  const handleSaveClick = async () => {
    if (validateInputs()) {
      try {
        const updatedRecipe = await updateUserRecipeById(
          recipe._id,
          editedRecipe
        );
        setRecipe(updatedRecipe);
        setEditedRecipe(updatedRecipe);
        setSaveMessage('Recipe saved successfully.');
        setIsEditing(false);
        setValidationError(null);
      } catch (error) {
        console.error('Error saving recipe:', error);
        setSaveMessage(`Error: ${error.message}`);
      }
    } else {
      setValidationError(
        'Please correct the errors in the form before saving.'
      );
    }
  };

  const handleInputChange = (field, value, subField = null, index = null) => {
    const newEditedRecipe = { ...editedRecipe };
    if (subField) {
      newEditedRecipe[field][subField] = value;
    } else if (index !== null) {
      newEditedRecipe[field][index] = value;
    } else {
      newEditedRecipe[field] = field === 'total_time' ? Number(value) : value;
    }
    setEditedRecipe(newEditedRecipe);

    if (field === 'total_time') {
      const isValid = value === '' || !isNaN(value);
      if (!isValid) {
        setValidationError('Total time must be a number.');
      } else {
        setValidationError(null);
      }
    }
  };

  const validateInputs = () => {
    let isValid = true;
    editedRecipe.ingredients.forEach((ingredient) => {
      const amount = isMetric ? ingredient.metric : ingredient.imperial;
      if (amount && isNaN(amount.quantity)) {
        isValid = false;
      }
    });
    if (isNaN(editedRecipe.total_time)) {
      isValid = false;
    }
    return isValid;
  };

  const handleUpdateRecipeId = (newRecipeId) => {
    navigate(`/recipe/user/${newRecipeId}`);
  };

  const handleImageClick = () => {
    setIsModalOpen(true);
  };

  const handleModalClose = () => {
    setIsModalOpen(false);
  };

  const handleImageUpload = async (files) => {
    const formData = new FormData();
    const newDisplayImages = [...displayImages];
    const newFiles = [...(recipe.additional_images || [])];

    if (!mainImage && files.length > 0) {
      // If there is no main image and files are uploaded, upload the first image as the main image
      const mainImageFile = files[0];
      formData.append('images', mainImageFile);
      const imageUrl = URL.createObjectURL(mainImageFile);
      setMainImage(imageUrl);
      newDisplayImages.unshift(imageUrl);

      try {
        const updatedRecipe = await uploadMainImage(recipe._id, formData);
        setRecipe(updatedRecipe);
        setDisplayImages([
          updatedRecipe.image,
          ...updatedRecipe.additional_images,
        ]);
        if (!window.location.pathname.includes('/user/')) {
          handleUpdateRecipeId(updatedRecipe._id);
        }
      } catch (error) {
        console.error('Error uploading main image:', error);
      }
    } else {
      // If there is already a main image, upload all images as additional images
      files.forEach((file) => {
        formData.append('images', file);
        const imageUrl = URL.createObjectURL(file);
        newDisplayImages.push(imageUrl);
        newFiles.push(imageUrl);
      });

      try {
        const updatedRecipe = await uploadAdditionalImage(recipe._id, formData);
        setRecipe(updatedRecipe);
        setDisplayImages([
          updatedRecipe.image,
          ...updatedRecipe.additional_images,
        ]);
        if (!window.location.pathname.includes('/user/')) {
          handleUpdateRecipeId(updatedRecipe._id);
        }
      } catch (error) {
        console.error('Error uploading additional images:', error);
      }
    }
  };

  const handleNextImage = () => {
    if (currentImageIndex + visibleImageCount < displayImages.length) {
      setCurrentImageIndex(currentImageIndex + 1);
    }
  };

  const handlePrevImage = () => {
    if (currentImageIndex > 0) {
      setCurrentImageIndex(currentImageIndex - 1);
    }
  };

  const handleImageSelect = (image) => {
    setMainImage(image);
  };

  const addIngredient = () => {
    const newIngredients = [
      ...editedRecipe.ingredients,
      {
        name: '',
        metric: { quantity: '', unit: '' },
        imperial: { quantity: '', unit: '' },
        other: { quantity: '', unit: '' },
      },
    ];
    setEditedRecipe({
      ...editedRecipe,
      ingredients: newIngredients,
    });
  };

  const addEquipment = () => {
    const newEquipment = [...editedRecipe.equipment, ''];
    setEditedRecipe({
      ...editedRecipe,
      equipment: newEquipment,
    });
  };

  const addInstruction = () => {
    const newInstructions = [...editedRecipe.instructions, ''];
    setEditedRecipe({
      ...editedRecipe,
      instructions: newInstructions,
    });
  };

  const removeIngredient = (index) => {
    const newIngredients = editedRecipe.ingredients.filter(
      (_, i) => i !== index
    );
    setEditedRecipe({ ...editedRecipe, ingredients: newIngredients });
  };

  const removeEquipment = (index) => {
    const newEquipment = editedRecipe.equipment.filter((_, i) => i !== index);
    setEditedRecipe({ ...editedRecipe, equipment: newEquipment });
  };

  const removeInstruction = (index) => {
    const newInstructions = editedRecipe.instructions.filter(
      (_, i) => i !== index
    );
    setEditedRecipe({ ...editedRecipe, instructions: newInstructions });
  };

  const toggleCompletedIngredient = (index) => {
    setCompletedIngredients((prev) =>
      prev.includes(index) ? prev.filter((i) => i !== index) : [...prev, index]
    );
  };

  const toggleCompletedInstruction = (index) => {
    setCompletedInstructions((prev) =>
      prev.includes(index) ? prev.filter((i) => i !== index) : [...prev, index]
    );
  };

  if (loading) {
    return (
      <div className="min-h-[40vh] lg:min-h-[61vh]">
        <Loading />
      </div>
    );
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!recipe) {
    return <div>No recipe found.</div>;
  }

  const formatTotalTime = (totalTime) => {
    if (!totalTime) return 'N/A';
    const minutes = parseInt(totalTime, 10);
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return hours
      ? `${hours} hrs ${remainingMinutes} mins`
      : `${remainingMinutes} mins`;
  };

  const canNavigatePrev = currentImageIndex > 0;
  const canNavigateNext =
    currentImageIndex + visibleImageCount < displayImages.length;

  return (
    <div className="text-gray-800 text-left">
      <main className="max-w-6xl mx-auto p-6 bg-white mt-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold">{recipe.title}</h2>
          {saveMessage && <div className="text-green-500">{saveMessage}</div>}
        </div>
        <div className="flex justify-between items-start mb-4">
          <RecipeInfo
            title={isEditing ? editedRecipe.title : recipe.title}
            author={isEditing ? editedRecipe.author : recipe.author}
            host={isEditing ? editedRecipe.host : recipe.host}
            recipeUrl={isEditing ? editedRecipe.url : recipe.url}
            totalTime={
              isEditing
                ? editedRecipe.total_time
                : formatTotalTime(recipe.total_time)
            }
            servings={isEditing ? editedRecipe.yields : recipe.yields}
            isEditing={isEditing}
            onInputChange={handleInputChange}
          />
          <div className="flex flex-col">
            <div className="flex flex-col lg:flex-row space-y-2 lg:space-y-0 lg:space-x-2">
              <AddToProfileButton
                recipeId={recipe._id}
                onUpdateRecipeId={handleUpdateRecipeId}
              />
              <AddToCartButton />
              {isEditing ? (
                <>
                  <button
                    onClick={handleSaveClick}
                    className="bg-teal-500 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded inline-flex items-center w-full lg:w-auto"
                  >
                    <span>Save</span>
                  </button>
                  <button
                    onClick={() => setIsEditing(false)}
                    className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded inline-flex items-center w-full lg:w-auto"
                  >
                    <span>Cancel</span>
                  </button>
                </>
              ) : (
                <div className="relative group">
                  <button
                    onClick={handleEditClick}
                    className={`font-bold py-2 px-4 rounded inline-flex items-center w-full lg:w-auto text-white ${isAuthenticated ? 'bg-blue-500 hover:bg-blue-700' : 'bg-gray-500 cursor-not-allowed'}`}
                  >
                    <span>Edit</span>
                  </button>
                  {!isAuthenticated && (
                    <div className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 w-full bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      Please log in to edit
                    </div>
                  )}
                </div>
              )}
            </div>
            {validationError && (
              <div className="text-red-500 pt-2">{validationError}</div>
            )}
          </div>
        </div>
        <div className="flex flex-wrap lg:flex-nowrap mb-6 min-h-[38rem]">
          <div className="w-full lg:w-1/2 lg:h-[32rem] h-full rounded-lg mb-4 lg:mb-0">
            <div className="relative h-full rounded-lg text-gray-300">
              {mainImage ? (
                <img
                  src={mainImage}
                  alt={recipe.title}
                  className="rounded-lg cursor-pointer w-full h-[32rem] lg:h-full object-cover"
                />
              ) : (
                <div className="w-full h-[32rem] lg:h-full flex items-center justify-center">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 1024 1024"
                    className="w-full h-full"
                  >
                    <path
                      d="M162.9769075216459 909.7241833438821 C149.6033348007893 905.1641870242483 141.63899659364137 898.0949064872326 135.18483592003435 885.0554731828433 L131.5 877.6109463656868 L131.0 837.5554731828433 C130.725 815.5249629322795 130.725 651.25 131.0 472.5 L131.5 147.5 L133.82404529503052 141.9191687842232 C139.07081532510813 129.3198713314277 149.8069821373943 119.79878289735619 162.30845813876897 116.65851305675454 C168.3952083478693 115.1295705457413 196.24391081882743 114.9999999999999 518.7740143921058 115.00000000000006 C906.4600159999372 115.00000000000024 873.5172091405763 114.42019615483494 884.4526969418694 121.43606075045454 C893.7726402367263 127.41544286707472 899.9983123160847 136.2250937910558 903.7432490334329 148.73319877688573 C905.3621475495275 154.14032688853317 905.4880421173458 176.5727738488847 905.7617734227521 508.40273882347753 C906.0835838394644 898.5164642069009 906.489380076341 872.4404352002655 899.8870023731879 885.9091974216442 C895.9642529634262 893.911553758953 887.6222965109642 902.3966941707546 879.8312109857015 906.3092327086179 C867.692481263855 912.4050774639394 895.1711954886707 911.9775352834926 516.5 911.9623144684956 L169.5 911.9483666877643 L162.9769075216459 909.7241833438821 Z M766.5 858.9962175612721 C792.8997716088941 851.5795688668603 812.1048653266306 834.7475883941529 819.5516428077144 812.5 C825.9203812233803 793.4731026310811 821.5322724138825 772.6421841898532 807.6148837272244 755.8346651933343 C798.1460986021351 744.3995612778665 785.806608294706 736.8778342658405 769.9292003097338 732.8627744696682 C762.8232366981013 731.0658269554939 759.5670313157502 730.8273990536732 747.5564241125144 731.224581094177 C735.6372234976953 731.6187403853152 732.2836317512404 732.104828016131 725.5 734.4215578736123 C711.7189201110461 739.1280396547376 704.3119210889623 743.6303156535342 694.9820446055763 752.9716154198609 C681.2835118875098 766.6869203015666 675.991077968491 779.2088981630484 676.0118688753865 797.8553351141633 C676.0250152484865 809.6457307124319 677.2660191530946 815.5652501082842 681.5950323911081 824.4867136286155 C685.1877957592475 831.8908737833083 695.940265525158 843.4231134198235 704.3746987803336 848.9183630412261 C711.2330282039197 853.3867405869598 724.1706180220941 858.5009049239978 732.3347493174092 859.9708307209188 C738.8021080068721 861.135258022699 761.1558379636323 860.4975855646377 766.5 858.9962175612721 Z M267.0428337091722 856.75 C273.609111643407 852.3247544797977 277.8385589261542 838.8707219601637 275.9094795605346 828.5448626263944 C275.41842458278023 825.9163732465341 273.4379055543968 820.6679462348042 271.50832616412697 816.8816914892169 C267.92405070075847 809.8485628959573 267.0582440253737 804.341755974626 269.2000000000001 802.1999999999999 C271.08271645781264 800.3172835421877 272.49810863855095 800.7192280627794 279.16947903403485 805.0311428630283 C291.33045375880727 812.8911601897079 303.01577979745025 813.9921700469195 313.25357112408665 808.2425997998016 C317.7839793064263 805.6983107767671 322.99999999999983 800.2167530501429 323.0 798.0 C323.0 795.7554475986323 317.7403947966437 790.1199177074454 313.46820240515353 787.7869273100152 C303.8338967852336 782.5257544887838 293.46047886889477 783.083176117361 280.1415840114091 789.5777524796779 C273.97698177504594 792.5837436220188 272.328981346661 793.0152934816801 270.38929511057165 792.1315132882581 C266.27698672424344 790.2578201963242 266.48660842452944 787.138255774207 271.34951718105606 777.8416062589356 C276.8714550776847 767.2850599940787 277.8876509800809 761.0176859834256 275.5556058990362 751.9006129372647 C273.6580634454336 744.4822172560214 269.87313424050797 738.5028755560347 265.71308446857927 736.351630212421 C263.2927067807865 735.1000042665524 262.280238400988 735.0554943288668 259.7807112450329 736.0908323763833 C255.79346464524514 737.7424039945414 251.32613030767425 744.0703364441652 249.351067488281 750.8643138709992 C246.81233996535929 759.5972297632194 247.93499888504851 766.7058130047001 253.59486614890565 777.7356952942066 C257.68874375446137 785.7137954848735 258.1834546910651 787.301945001637 257.22799055939527 789.3989603444466 C255.46300543263635 793.2726807364152 252.77823056064585 793.4216399006194 246.03912696603817 790.0197512296149 C233.46551648646226 783.6726128537753 222.0794442589155 782.6105993623081 212.5790423169532 786.8988276474695 C208.11815012436833 788.9123555165174 203.58170165115803 793.3133808607851 202.59844102933494 796.5814856732873 C201.609851985583 799.8673007865603 205.84655524230143 805.1043737116212 212.0275119279575 808.2369472242817 C222.892384530951 813.7433783263721 233.2525433764292 812.86424054668 244.67099857063167 805.466900664525 C252.24191461850347 800.5621531944992 254.43241125822638 800.0709336430493 255.96481624151198 802.9342585459107 C257.66451469884913 806.1101741643873 257.1847929918639 808.6977749274677 253.39601514149558 816.7902746273523 C248.0564801192668 828.195056662992 247.16726627201902 833.5967887526442 249.29435057569572 841.7067704451421 C251.39783803068437 849.7267839071708 254.2692984777196 854.5833466148088 258.39522703433374 857.0992782059496 C262.3423753407396 859.5061921848853 262.9920718043209 859.4799508416161 267.0428337091722 856.75 Z M520.3926448179039 831.4997931917779 C541.308437221755 829.6547233354316 625.9524174608086 821.267317943615 631.75 820.4653489390982 L636.0 819.8774542008767 L636.0 803.5320516631828 L636.0 787.1866491254889 L626.25 786.531407816608 C620.8875 786.1710250967234 603.0 784.7894290680771 586.5 783.4611944196163 C530.6795770185132 778.967702304722 512.5453835187598 777.7891114227808 497.0 777.6443443934393 L481.5 777.5 L481.23418128122063 805.25 L480.96836256244126 833.0 L492.23418128122063 832.9949821548214 C498.4303815765493 832.9922223399733 511.1016901680568 832.3193873066036 520.3926448179039 831.4997931917779 Z M405.873985868676 825.1887057708142 C418.23365593507833 817.5911695119798 420.8907379193004 801.8948531089441 411.7131354222962 790.6947987470535 C402.52841860155894 779.4860622906197 386.42369756058054 779.0314542062437 377.019266965494 789.7154515706195 C370.0563886488612 797.6256990684577 369.14970421740946 807.8553256279353 374.6263374454903 816.7135718908223 C381.76064542609583 828.2530441131805 395.0328494792302 831.8527935954303 405.873985868676 825.1887057708142 Z M340.9468841111245 740.8301861570903 C343.0182190273542 732.7482620508564 349.42439912704003 726.723270183371 359.25 723.6161642806956 C362.2340614034961 722.672527863887 361.21399405069076 721.4567231255949 355.425156273678 719.0573838110527 C347.8842090479437 715.9318356708994 343.4132529435623 711.1098705278691 341.115214383965 703.6239867076084 C339.31286603526286 697.7528187562808 337.00080259325256 694.9681663495398 336.9992111049703 698.6666666666667 C336.998777212704 699.675 335.69560928478296 703.2538783613295 334.10328237625686 706.6197296918434 C330.857968657971 713.4796548982438 326.7072242288239 717.1989519961938 319.59072245912444 719.6237878565879 C317.01445984611354 720.5016087539872 315.0618912565428 721.6856737696285 315.25168114896724 722.2550434469018 C315.4414710413917 722.8244131241752 317.82498410250224 724.0011272840685 320.54837684032407 724.8699638022202 C327.4030671087843 727.0567968443842 333.31594967502633 733.1541584899054 335.59588557383074 740.3869475380636 C336.56903297914664 743.4741263921286 337.87299212387336 746.0 338.49357256211226 746.0 C339.1141530003512 746.0 340.21814319740673 743.6735837706906 340.9468841111245 740.8301861570903 Z M551.5 743.5404904145538 C576.7273137089244 739.950972929146 595.244102490857 734.3975789129059 616.8837248508199 723.9311731283774 C667.2417189949297 699.5745927574397 701.6922063896795 661.8571976228897 722.7514957379351 608.024059803419 C741.9466987362808 558.956021875146 741.4169712015967 499.94877820571156 721.3373501743737 450.5 C702.770537403009 404.77671640448483 666.3913795458546 364.77618189584797 624.0406282558714 343.5178401061339 C594.4227478412026 328.6508777556734 565.1180288205513 321.33650509413246 531.0 320.2951698171694 C501.4349784723604 319.39279940055377 479.9834384080211 322.3029084320164 455.22166345192323 330.5752346011597 C406.2405927027668 346.938657419972 367.19230736833936 378.3609527302809 341.3058717975024 422.2436808649685 C320.2819822267459 457.88341302672535 310.8122278006813 496.19238053445486 312.3207902525881 539.5 C312.9748631410301 558.2770414937556 314.6149607664075 569.9309770638944 318.94297728526726 586.5548458933919 C330.78128348914197 632.0256634466692 357.9773678007855 673.0846398134344 395.0 701.3810636086291 C424.56556676550343 723.9780470548671 463.6721807252559 739.8129630621778 500.0 743.8973035080691 C512.3475667288585 745.2855417014383 540.6119747207889 745.0897143062543 551.5 743.5404904145538 Z M507.1754905382324 725.9949853969317 C447.331732641057 719.7058143058507 395.2493334258789 688.1855244116173 363.43243057018253 639.0016250918881 C347.2400952242357 613.970835796702 336.6378243810298 585.0166499078401 333.04899761811276 556.0262343811571 C331.56931095146393 544.0733778769957 331.7806725062806 517.4407937065859 333.4550342414282 504.86364449532385 C341.906279067898 441.3812052038854 381.87182237574217 385.6979283715914 438.5 358.50637210399987 C463.98042958956654 346.2712523460525 488.4694591379681 340.291063963013 517.1047410025241 339.31119909536574 C551.4247468330211 338.13680981818607 578.8410605567421 343.81482209198407 609.5656647162698 358.460172403149 C667.2051570943033 385.9349139246684 706.3458052819731 439.8170008799814 715.515100576733 504.31306396814455 C717.9035780308039 521.1134164064016 717.4753232806828 548.0632420200677 714.5480257360812 565.1705286046811 C710.8283880162586 586.908294408944 706.4067824938588 600.2724125666841 696.2419098079378 620.5 C678.6991247139158 655.4092635271942 653.5045114585588 682.35189330163 621.016052468953 700.9450698729354 C601.1838291430348 712.2950705060321 577.5129265963699 720.6172738732589 554.0 724.5065380685767 C542.4195474664006 726.4220562929842 518.480212800288 727.1830346595694 507.1754905382324 725.9949853969317 Z M549.5 691.5865815799523 C568.6121501710924 688.2164304254013 581.3611653727912 683.9665164313734 598.2051549260423 675.3506044298189 C638.4782424197721 654.7504148619078 670.0470384693042 613.2045490132879 679.8669129983318 567.880289739624 C684.0529423828053 548.5594032468052 684.3576420889933 517.1670493331627 680.5403302883208 498.5 C668.1096886696877 437.7128774241098 619.7160011146676 388.35335258943974 560.4490297238965 376.01192702770965 C523.382347721233 368.29336665552535 488.0926553254874 372.45996479119714 454.0832683869766 388.5703641462817 C409.6234950138179 409.6311584961814 375.9779943737036 453.9100942061366 367.5134451836052 502.5 C361.6265365361899 536.2932157012691 366.9479911066367 573.0816615708511 382.1152801507928 603.4458613571987 C391.6454406253651 622.5247946987748 400.1381566502515 634.0704729818914 415.6605788905515 649.050026859185 C439.1558063564647 671.7235516632696 467.24144887203516 685.7369383733353 501.5 691.8797752727381 C509.7196448429826 693.3536244572193 540.5469344685151 693.1653251471383 549.5 691.5865815799523 Z M256.43346597135405 675.9390093235421 C265.5477175575763 672.52893079037 272.86889245758806 663.9353849231601 275.1109686957194 654.0154822204654 C275.54943447633195 652.0755223706776 275.04708450557234 629.212077628633 273.99006909852915 603.0 C272.9365651412984 576.875 271.5999058126317 543.35 271.01971503482525 528.5 C270.4395242570189 513.65 269.6944072331856 498.67903316415715 269.36389942630683 495.23118480923813 L268.7629761410727 488.9623696184762 L246.63148807053636 489.23118480923813 L224.5 489.5 L223.74930655955285 506.5 C223.33642516730694 515.85 221.60354550068269 551.85 219.89846285594342 586.5 C216.5190695766397 655.1746636529042 216.5405147764337 656.0440196162986 221.8070501401825 663.871241730174 C229.8555494404038 675.833070020521 243.76249658836568 680.6798265237966 256.43346597135405 675.9390093235421 Z M808.5684987725722 676.4946595907671 C820.1641865536036 672.9550766960998 828.1224916221728 662.7874779968349 829.5023131798528 649.7494390564675 C829.8660727088071 646.3122475754104 829.6763027197028 634.275 829.0806020929545 623.0 C828.484901466206 611.725 827.1008651628252 585.625 826.0049658632195 565.0 C824.9090665636137 544.375 824.0096268036415 527.3875 824.0062108410591 527.25 C824.0027948784766 527.1125 813.2358172833042 527.0 800.0795939628981 527.0 L776.1591879257963 527.0 L775.6117659277969 533.25 C774.9594493981192 540.6975967816147 771.7723190020363 630.6072634072879 771.7036085587894 643.5 C771.637957432447 655.8186904195037 773.749829317435 661.8802641000436 780.4372823110001 668.5677170936087 C788.8041757540062 676.9346105366149 798.3319077054382 679.6193783073406 808.5684987725722 676.4946595907671 Z M501.13165650216035 671.3936271066605 C481.5105172999479 668.1044784801596 458.2584190922814 658.1802166690386 442.91429313352455 646.5457896829818 C403.3746180496343 616.5654920725209 382.4422388592616 569.7830502154962 386.04027295691225 519.4362280851615 C388.05171242034635 491.2904178613018 398.1018940827206 466.1568949363101 416.4991637377095 443.26454727117175 C436.9753869944287 417.7852870085112 466.45232267214396 400.10236583419055 498.039101643523 394.3495477504598 C511.0743404471321 391.9754735346907 537.1596830116135 391.96390301589884 549.9608983564744 394.32651711081655 C607.0800305398384 404.8685213776266 652.6194935213518 451.32123855963613 661.6344839977625 508.2396190857237 C663.6283496796757 520.828385085866 663.0218372739907 550.6641689561087 660.5517880680526 561.5 C650.9126483825573 603.7858333305242 624.7345139632347 638.40843250637 588.0982887092431 657.3253337310339 C576.0745671766491 663.5337122145722 559.2680727849358 669.2454728705867 546.4435285046646 671.4818862473958 C535.6432921942067 673.3652898545373 512.6259945331514 673.320456418534 501.13165650216035 671.3936271066605 Z M824.178822289258 491.20456255510004 C824.7047956007965 483.9330558314007 826.4765141709407 481.43518573261446 835.6674791482038 475.00719750697056 C848.488585788499 466.04035640514707 853.2978977483588 458.70000913287294 856.0450048154256 443.9054274002439 C858.1174941982064 432.74400819997453 855.1260956816219 339.8931162749738 851.4570964448442 301.5 C848.1613447215157 267.0126177572272 845.053419110849 246.71504345486431 839.5138861862771 223.5 C833.9821948865454 200.31781918245508 826.4972075151948 183.60275097940894 817.4597956159595 174.25000000000003 C808.7615302142751 165.2482292317953 804.3484515696078 167.3789535045398 795.5995019077005 184.8045951395622 C787.4196655394106 201.0967105014269 782.6503107611218 218.29055120474948 778.824382684337 245.28001395695486 C776.733100425829 260.03266572864845 776.6546936752716 264.13090198841354 776.270857889948 378.75 L775.8748629606396 497.0 L799.8172405754333 497.0 L823.7596181902269 497.0 L824.178822289258 491.20456255510004 Z M274.1027918560645 455.75 C280.20669883772126 451.09137213316114 286.4827772221141 441.3618564287813 289.45681318862967 431.94736680598726 L292.0 423.8967560823637 L292.0 370.3987181142976 C292.0 313.2024516839153 291.95489651746567 312.65178014113627 287.05539100557934 310.02964436655236 C284.5850090824071 308.7075360840082 279.414990917593 308.7075360840082 276.9446089944207 310.02964436655236 C272.12521452323034 312.60890601328015 272.0 313.9122061273191 272.0 361.49579461857036 L272.0 406.09090909090907 L269.5454545454545 408.5454545454545 C266.54576298504946 411.5451461058596 263.13011510469613 411.6767889460488 259.63485869180124 408.9274198509671 L257.0 406.85483970193417 L257.0 361.8616783968778 C257.0 330.6936744580549 256.6567644300114 316.19735469180654 255.88296003025263 314.68425854591067 C252.65838991229185 308.3789382102051 245.16699157069982 307.0926635321499 239.7657765424591 311.9169347357724 L236.5 314.83386947154474 L236.0 361.00637452089234 L235.5 407.1788795702399 L233.1392160376903 409.08943978511996 C229.9286636872832 411.6877095490657 226.398512873679 411.4894219645881 223.45454545454547 408.54545454545456 L221.0 406.0909090909091 L221.0 361.49579461857036 C221.0 323.6757236778952 220.77054235295057 316.45695798543335 219.48964955148995 313.9799844396681 C215.2677865507996 305.81580164886 203.1861761892075 308.0830477308909 201.4672940723552 317.36207619946657 C201.14758963156416 319.08793428975997 201.02606929205797 344.35 201.19724887345257 373.5 L201.5084844759882 426.5 L204.17704182961586 433.3792490278935 C207.44564291851552 441.80534518536115 212.85288437534973 449.8202950058724 218.801408265753 455.0563951435459 L223.2815799748737 459.0 L246.5630506574682 459.0 L269.8445213400627 459.0 L274.1027918560645 455.75 Z M350.85077818103605 349.2681090052881 C351.54685150401883 346.6655689581966 353.24125306806525 343.0614150891375 354.616114990028 341.25887818515673 C357.30697485708754 337.73097902937025 363.65167153141124 334.0 366.96016193270356 334.0 C370.84174534145205 334.0 368.97751572674116 331.35870833203086 363.4908786089103 329.0846241983015 C356.8491909373451 326.33179833598837 352.5700701977108 321.5031531108846 350.8603169031377 314.8320463483553 C350.17918795381263 312.17442085675987 349.31726875734535 310.0 348.94494091098807 310.0 C348.57261306463084 310.0 347.2911306784546 312.6791047876762 346.09720227504084 315.953566194836 C343.6154085481815 322.76011988423346 338.02536455741983 328.31290298608457 331.76742485903674 330.1878273241538 C329.6647667592348 330.8177990138739 328.08664034028163 331.7599210208449 328.2604772613631 332.28143178408936 C328.4343141824446 332.8029425473338 330.76718184699405 334.06118377073125 333.4446276270286 335.07752339163926 C339.97943000374175 337.5580884958079 343.520807150922 341.18529919096176 346.23043510421326 348.17322478123816 C347.473095181726 351.37795115155717 348.73627604631884 354.0 349.03750369219733 354.0 C349.33873133807583 354.0 350.15470485805326 351.87064905237963 350.85077818103605 349.2681090052881 Z M707.0007888950297 347.25 C707.001222787296 346.2875 708.2945140152958 342.76700591287516 709.8747694016959 339.4266798063893 C713.1821092128724 332.4356620194096 717.9420403213436 328.06755132669986 725.6712773281147 324.93048362025854 C728.6020747976517 323.7409599858106 731.0 322.2271578770831 731.0 321.56647893419733 C731.0 320.9057999913116 728.5010106674945 319.5775075004014 725.4466903722098 318.61471784328575 C718.261909692243 316.3499152494006 711.9228206498215 310.3233677796593 709.5481111706459 303.5 C705.5660882922549 292.05826077061306 704.8519429501052 291.5360092283913 703.0527921510406 298.75 C701.473560172047 305.08219012470414 697.7066708106189 311.3606175776243 693.8309966625817 314.12034099084997 C692.0922884465375 315.35841044388053 687.9315244727113 317.36284896262913 684.5848544985234 318.5746488102913 C681.2381845243356 319.7864486579535 678.5 321.34324041371787 678.5 322.0341860453233 C678.5 322.7251316769287 680.6915323258781 323.92947147307314 683.3700718352848 324.71049670342205 C693.2926559325942 327.60378556589427 700.4726893054755 334.87741916025715 702.892521632601 344.4874447084756 C704.0153576623974 348.9466309140018 706.9991195814227 350.9530260074844 707.0007888950297 347.25 Z M551.0 283.52997187300184 C645.9524886181345 276.3374635374035 712.6782874210692 270.5458121713806 713.9166666666619 269.3891664877484 C714.1458333333259 269.1751249194868 714.1458333333259 268.8296329220138 713.9166666666619 268.6214064933639 C713.1038204262309 267.8828345529057 651.7395543441941 265.9364617801365 599.0 264.97644036864295 C549.3590017827111 264.0728221684305 545.319672813892 263.8688865152609 543.0 262.1491399269963 C537.4764743415013 258.05413810195125 538.1164669694157 251.09993506350852 544.2522362252384 248.5422566871387 C546.6516452683198 247.5420696902545 558.7321141536615 246.89916271723254 590.5 246.08101034813734 C614.15 245.4719265827683 645.65 244.3143235091944 660.5 243.50855907352866 C675.35 242.7027946378629 694.0674968392436 242.03373794081932 702.0944374205413 242.0217664134318 C724.3189773239999 241.9886203242794 738.0 240.96985334154823 738.0 239.34803342441262 C738.0 238.60661504098567 737.1434561004819 238.0 736.096569112182 238.0 C735.0496821238821 238.0 719.6371821238821 236.88558305380403 701.846569112182 235.5235178973423 C648.4503568027168 231.43545638839234 617.2967146210306 230.0034471042851 581.7178813691035 230.00167890553303 C554.8525817362461 230.00034375243936 547.2422016398881 229.71021166999716 544.5483727677852 228.58465810009207 C535.559582632872 224.82890177486522 537.8067602087082 213.1272623196243 547.81258937094 211.5870312971833 C549.8406652169231 211.27484274357127 584.35 210.57399613717314 624.5 210.02959439407633 C664.65 209.4851926509795 704.925 208.720552321109 714.0 208.33039366103074 L730.5 207.62101427907027 L719.0 206.29251226403568 C712.675 205.56183615576666 685.675 202.4837112850281 659.0 199.4522347735056 C632.325 196.42075826198308 594.975 192.15770672139578 576.0 189.97878690553384 C496.7619254018661 180.87979291804393 487.0046789809852 180.79354466893355 472.43098861809705 189.06329850763206 C465.9421897132629 192.74532881811822 456.97586818765166 202.14070428405708 453.6078624410191 208.78714371787103 C446.1051816192396 223.59297168388696 446.1302607491646 240.75088038042026 453.67808214761146 256.82801746480794 C457.2618143838946 264.46149888877477 468.5620114050649 275.7436305910965 476.7745098016975 279.8875214856997 C490.61068200558014 286.8690251941622 500.5076074546271 287.3546947375855 551.0 283.52997187300184 Z M290.0 259.44069373695584 C363.74851957579506 253.08214016728826 400.79859416268647 250.0 403.4855613701552 250.0 L406.1652089902044 250.0 L405.8326044951022 232.46216001781426 C405.5882821048919 219.5793305712169 405.1599830121633 214.7145404135485 404.2189795859075 214.13397135318505 C403.5144183581566 213.69927957784114 388.8894183581566 212.1177891037832 371.7189795859075 210.61954807750072 C354.5485408136584 209.12130705121828 328.575 206.8099182001789 314.0 205.48312840852435 C232.8563570543254 198.09646925806243 228.10344507450387 197.93547189674183 218.8608364893874 202.26044001276105 C199.29269519091494 211.41711763534656 193.76660120598527 237.09266505374248 207.90657872290234 253.15652782519047 C211.72324643695168 257.49249132508663 218.5894652668592 261.62391004714823 224.44038797681722 263.1049566170441 C228.84198227746722 264.2191340663471 245.14963802964382 263.30766531615336 290.0 259.44069373695584 Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
              )}
              <div
                className="absolute inset-0 flex justify-center items-center bg-black bg-opacity-50 opacity-0 hover:opacity-100 transition-opacity rounded-lg cursor-pointer"
                onClick={handleImageClick}
              >
                <span className="text-white text-4xl">+</span>
              </div>
            </div>
            {displayImages.length > 1 && (
              <div className="w-full mt-4 flex justify-between items-center space-x-2">
                <button
                  onClick={handlePrevImage}
                  className={`h-20 w-12 ${
                    canNavigatePrev
                      ? 'text-blue-500 hover:text-blue-200 hover:bg-blue-500'
                      : 'opacity-50 cursor-not-allowed text-gray-500'
                  } ${!canNavigatePrev ? '' : 'hover:bg-blue-100'} rounded-l-lg`}
                  disabled={!canNavigatePrev}
                >
                  <i className="fas fa-chevron-left text-2xl"></i>
                </button>
                <div className="flex flex-wrap justify-center space-x-2">
                  {displayImages
                    .slice(
                      currentImageIndex,
                      currentImageIndex + visibleImageCount
                    )
                    .map((image, index, arr) => (
                      <div
                        key={index}
                        className={`w-20 h-20 transform transition duration-300 ease-in-out hover:scale-105 cursor-pointer ${
                          index === 0 ? 'rounded-l-lg' : ''
                        } ${index === arr.length - 1 ? 'rounded-r-lg' : ''}`}
                        onClick={() => handleImageSelect(image)}
                      >
                        <img
                          src={image}
                          alt={`Additional ${index}`}
                          className={`w-full h-full object-cover rounded-lg ${
                            mainImage === image
                              ? 'border-4 border-blue-500'
                              : ''
                          }`}
                        />
                      </div>
                    ))}
                </div>
                <button
                  onClick={handleNextImage}
                  className={`h-20 w-12 ${
                    canNavigateNext
                      ? 'text-blue-500 hover:text-blue-200 hover:bg-blue-500'
                      : 'opacity-50 cursor-not-allowed text-gray-500'
                  } ${!canNavigateNext ? '' : 'hover:bg-blue-100'} rounded-r-lg`}
                  disabled={!canNavigateNext}
                >
                  <i className="fas fa-chevron-right text-2xl"></i>
                </button>
              </div>
            )}
          </div>

          <section className="w-full lg:w-1/2 lg:pl-6 mt-6 lg:mt-0">
            <section className="mb-6">
              <div className="mb-4 flex items-center justify-between">
                <h3 className="text-xl font-semibold">
                  {isEditing ? (
                    <button className="text-blue-500" onClick={addIngredient}>
                      <i className="fas fa-plus"></i> Add Ingredient
                    </button>
                  ) : (
                    'Ingredients'
                  )}
                </h3>
                <ToggleSwitch onToggle={handleToggle} />
              </div>
              <Ingredients
                ingredients={
                  isEditing ? editedRecipe.ingredients : recipe.ingredients
                }
                isMetric={isMetric}
                isEditing={isEditing}
                onInputChange={(e, index, field, subField) => {
                  const newIngredients = [...editedRecipe.ingredients];
                  if (subField) {
                    newIngredients[index][field][subField] = e.target.value;
                  } else {
                    newIngredients[index][field] = e.target.value;
                  }
                  setEditedRecipe({
                    ...editedRecipe,
                    ingredients: newIngredients,
                  });
                }}
                onRemove={removeIngredient}
                onToggleComplete={toggleCompletedIngredient}
                completedIngredients={completedIngredients}
              />
            </section>
            <section className="mb-6">
              <div className="mb-4 flex items-center justify-between">
                <h3 className="text-xl font-semibold">
                  {isEditing ? (
                    <button className="text-blue-500" onClick={addEquipment}>
                      <i className="fas fa-plus"></i> Add Equipment
                    </button>
                  ) : (
                    'Equipment'
                  )}
                </h3>
              </div>
              <Equipment
                equipment={
                  isEditing ? editedRecipe.equipment : recipe.equipment
                }
                isEditing={isEditing}
                onInputChange={(e, index) => {
                  const newEquipment = [...editedRecipe.equipment];
                  newEquipment[index] = e.target.value;
                  setEditedRecipe({ ...editedRecipe, equipment: newEquipment });
                }}
                onRemove={removeEquipment}
                colorClass=""
              />
            </section>
          </section>
        </div>
        <div className="flex flex-col lg:flex-row">
          <div className="lg:w-2/3">
            <section className="mb-6">
              <div className="mb-2 flex items-center justify-between">
                <h3 className="text-xl font-semibold">
                  {isEditing ? (
                    <button
                      className="text-blue-500 hover:text-white hover:bg-blue-500 rounded-md p-2"
                      onClick={addInstruction}
                    >
                      <i className="fas fa-plus"></i> Add Instruction
                    </button>
                  ) : (
                    'Instructions'
                  )}
                </h3>
              </div>
              <Instructions
                instructions={
                  isEditing ? editedRecipe.instructions : recipe.instructions
                }
                isEditing={isEditing}
                onInputChange={(e, index) => {
                  const newInstructions = [...editedRecipe.instructions];
                  newInstructions[index] = e.target.value;
                  setEditedRecipe({
                    ...editedRecipe,
                    instructions: newInstructions,
                  });
                }}
                onRemove={removeInstruction}
                onToggleComplete={toggleCompletedInstruction}
                completedInstructions={completedInstructions}
              />
            </section>
          </div>
          <div className="lg:w-1/3 lg:ml-6 mt-6 lg:mt-0">
            <NutritionalInfo
              nutrients={isEditing ? editedRecipe.nutrients : recipe.nutrients}
              isEditing={isEditing}
              onInputChange={(e, field) => {
                setEditedRecipe({
                  ...editedRecipe,
                  nutrients: {
                    ...editedRecipe.nutrients,
                    [field]: e.target.value,
                  },
                });
              }}
            />
          </div>
        </div>
      </main>

      <ImageUploadModal
        isOpen={isModalOpen}
        onClose={handleModalClose}
        onUpload={handleImageUpload}
      />
    </div>
  );
};

export default RecipePage;
